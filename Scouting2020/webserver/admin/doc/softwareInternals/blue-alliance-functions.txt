//
// $Revision: 3.0 $
// $Date: 2016/03/14 22:56:41 $
//
// bluealliance.inc
//
// Functions and field mappings to be used for The Blue Alliance API
//
// There are three broad areas in this file:
//  1. custom field mapping and functions to map The Blue Alliance data
//      into the compsystem database
//  2. Update functions which perform retreival and updating of data,
//      usually called by a web page or background process
//  3. Library functions used by update and other functions that simplify
//      writing an update function.
//
// Summary functions available:
//
//
// inlucde httpful library
// ***********************************************************************************
//
// Custom field mapping section
//
// Functions and variables in this section set up maps from Blue Alliance data 
//  to compsystem database columns
//
// - These maps may change and Blue Alliance data structures change
// - Some of the maps change each year for the game
// - Some yearly-changing maps are defined in params.inc instead of here
//    because they also involve UI configuration.  Try to reference that map in 
//    comments below, then direct people to the params.inc file for configuration.
// - In general, the map definitions should provide configuration of the data loads
//    without additional programming.
//
// ***************************
//
// The Blue Alliance API fieldmaps, API v3
//
// Sets up map from Blue Alliance to our scheme structure
//
// Note: $tba_score_to_match_alliance is generated in params-custom.inc
//
//
// Format of map:
//   $tba_fieldmap - fieldmap which is an array of key value pairs 
//        where key is the Blue Alliance field name and 
//        value is the Compeition System column name.
//
//    Variable name is $tba_[BlueAllianceEntity]_to_[CompSystemTableName]
// 
// tBA fields extras: fieldlen = length is truncated to this length, 
// tBA event to event table
// tBA team to team table
//$tba_team_to_team = array ("team_number" =>"teamnum","nickname"=>"name","city"=>"city",
//   "state_prov"=>"state_prov","country"=>"country",
//   "website"=>"website","name"=>"sponsors","rookie_year"=>"rookie_year");
// tBA team history to team history
// tBA team award to team award
// tBA team to teambot table
// tBA match to match_instance table
// tBA match to match_instance_alliance table
// tBA match to match_team table
// unused?  $tba_match_to_match_team = array ();
// tBA record to team_bot table
// tBA stats to teambot
// tBA ranking to team_bot table
// tBA stats to match_instance_alliance
// ***************************
//
// The Blue Alliance API functions -- Custom Mapping Functions
//
// The first functions are defined as part of custom-mapping the Blue Alliance
//  data to competition system database.  These functions are essentially custom.
//
//
// Specific field to field mapper functions 
//
// basic pattern
// Field Mapper: [Element] to {Element]
// function: tba_map_[element]($tba_response_array,$tba_dbarray)
//   $tba_responsearray - segment of tba response that can be interpretted 
//        as an array in a foreach
//   $tba_array - tBA data, formatted as an array key value 
//        pairs where the key is the db column name and the value
//        is the data. (optional parameter)
//
//  Maps [element field] 
//     from blue alliance returned object in array to a tba_dbarray.
//     A tba_dbarray is a col=>value map that can be inserted/updated in the db.
//
//  Returns the tba_dbarray
//
// Field Converter: team key to teamnum
// function: tba_convert_teamnum($tba_dbarray)
//   $tba_array - tBA data, formatted as an array key value 
//        pairs where the key is the db column name and the value
//        is the data. (optional parameter)
//
//  Returns the tba_dbarray
//
//  Finds teamnum index and if the teamnum is in frc%d format, converts
//     to straight teamnum
//
// Special-purpose extraction function 
// function: tba_getmatcharray($tba_response_array)
//   $tba_responsearray - segment of tba response that can be interpretted 
//        as an array in a foreach
//   
//   Returns: match array with event, match type, and matchnum
//
//  Note: the array can be passed as a starting or template $tba_dbarray
//
// ***********************************************************************************
// ***********************************************************************************
//
// Data Retrieval and Update Functions
//
// These functions are usually called from a web page or from a background daemon
//  periodically processing updates
//
// Note: these functions directly print errors or progress messages rather than
//  returning up the stack.
//
// Function directory:
//  - tba_get_event_teams - uses api /event/{}/teams endpoint to get teams info 
//  - tba_get_event_matches - retrieve match info from /event/()/matches
//  - tba_get_event_rankings - 
//  - tba_get_event_oprs
// stats
//
//  - tba_get_team_history - 
// function: tba_get_event_teams()
//   Returns - TRUE if successful, FALSE if otherwise
//
// Gets event teams based on $sys_event_id
//JLV skip      $tba_dbarray = tba_mapfields($tba_team_to_teambot, $teamobj, $tba_dbarray);
// function: tba_get_match_data()
//   Returns - message string of what to print as a final message
//
// Gets match data for event based on $sys_event_id
// function: tba_get_event_stats()
//   Returns - message string of what to print as a final message
//
// Gets event stats based on $sys_event_id
// function: tba_get_event_rankings()
//   Returns - message string of what to print as a final message
//
// Gets event rankings based on $sys_event_id
// Decode the event rankings based on display variable structures
//
// function: tba_get_event_oprs()
//   Returns - message string of what to print as a final message
//
// Gets event oprs based on $sys_event_id
// Decode the event oprs based on display variable structures
//
// function: tba_get_event_predictions()
//   Returns - message string of what to print as a final message
//
// Gets event oprs based on $sys_event_id
// Decode the event predictions based on display variable structures
//
// Uses custom-defined array (see customparams.php) to order and source data
//
//
// function: tba_get_team_history()
//   Returns - message string of what to print as a final message
//
// Gets event teams based on $sys_event_id
//
// function: tba_get_team_awards()
//   Returns - message string of what to print as a final message
//
// Gets event teams based on $sys_event_id
// ***********************************************************************************
//
// The Blue Alliance API functions -- Standard functions / Library section
//
//
// 
// $tba_error array
//   This array is populated when a function needs to return more descriptive 
//   data.  The array includes the following keyed elements:
//    - state - boolean that is true if in error or advisory condition 
//    - fatal - boolean if function things functions above should stop processing
//    - code - the error code being returned by function
//    - message - a message to display to user
//    - response - (object or array) functional details of entire response
//       (example: the http response object
//
// Example array def:
//  array('state'=>FALSE, 'fatal'=>FALSE, 'code'=>, 'message'=>"", 'response'=>"");
//
//  
// function: tba_getdata($tba_url, $skiplastmod) - 
//   $tba_url - URL/endpoint to call
//   $skiplastmod - Boolean value that determines if lastmod function is used
//         True means skip, false means process lastmod
//
// Returns:
//   $tba_response if success
//   0 if call created an error
//   NOTE: 
//
// looks up last modified in database and sends with data.
// Calls $tBA_url and returns the data.  
// Prepares global $tba_error array if in error state.  See $tba_error doc
//  for structure of the error array
//
// function: tba_getlastmod($tba_url)
//   $tbaurl - URL that returned last modified time
//
// searchs database for last modified time returned from tBA for URL 
//  and returns the string.
//
//
// function: tba_setlastmod($tba_url, $lastmod)
//   $tbaurl - URL that returned last modified time
//   $lastmod - string with last modified time 
//
// stores last modified string for URL
// returns nothing.
//
// ****
//
// tBA field general mapping and database functions
//
// The functions below bridge from the Blue Alliance API objects and fields
//  to the system database tables and columns.
//
// Basic use pattern:
//
//  // map tBA fields into db array
//  $tba_dbarray = tba_mapfields($tba_event_to_event, $tba_response->body, $tba_dbarray (or "") );
//  // use dbarray to update event table
//  tba_updatedb("event", array ("event_id"=>$new_sys_event_id, "year"=>2016), $tba_dbarray);
//  commit the query
//
//
// function: tba_mapfields($tba_fieldmap,$tba_response_array,$tba_dbarray)
//   $tba_fieldmap - fieldmap which is an array of key value pairs 
//        where key is the Blue Alliance field name and 
//        value is the Compeition System column name.
//   $tba_responsearray - segment of tba response that can be interpretted 
//        as an array in a foreach
//   $tba_array - tBA data, formatted as an array key value 
//        pairs where the key is the db column name and the value
//        is the data. (optional parameter)
//
//  Maps blue alliance returned object in array to a tba_dbarray.
//  Returns the tba_dbarray
//JLV clean - commenting out but may cause problems
//       if ($tba_responsearray->$field != NULL)
//
// function: tba_updatedb($tablename, $table_identifiers, $tba_dbarray)
//   $tablename - table name in compsys for which array applies
//   $table_identifies - formatted array of key/value pairs where the 
//        key is the db column name that is part of the identifier
//        (and thus the where clause), and the value is the data.
//   $tba_data_array - tBA data, formatted as an array of key/value 
//        pairs where the key is the db column name and the value
//        is the data.
//
// Updates database with data
//   Queries for row with data.  If found, updates.  If not found, inserts.
//
// NOTE: $tba_dbarray must contain all columns necessary to insert a new 
//         row in the table.  If columns are missing, likely duplicate entries
//         will occur.  These columns must exist in $table_identifiers
//         and $tba_dbarray
//
//
// function: tba_updatedbifnew($tablename, $table_identifiers, $tba_dbarray)
//   $tablename - table name in compsys for which array applies
//   $table_identifies - formatted array of key/value pairs where the 
//        key is the db column name that is part of the identifier
//        (and thus the where clause), and the value is the data.
//   $tba_data_array - tBA data, formatted as an array of key/value 
//        pairs where the key is the db column name and the value
//        is the data.
//
// Updates database with data
//   Queries for row with data.  If found, updates only the columns which are 
//     currently NULL.  If not found, inserts.
//
//
// function: tba_set_autoupdate($state) - sets autoupdate
//   $state - 0 for off, 1 for on
//   returns true if successful, false if failed
//
// Sets system value in db auto_update_state to $state
//
//
// function: tba_set_autoupdate($state) - sets autoupdate
//   $state - 0 for off, 1 for on
//   returns true if successful, false if failed
//
// Sets file defined by $auto_update_file with $state
//
//
// function: tba_get_autoupdate() - sets autoupdate
//   returns $state - 0 for off, 1 for on
//
// Gets state of setting for $auto_update_file 
//  If time is past $auto_update_stop (set in params.inc), set state to zero
//
//
// function: tba_get_autoupdate_file() - sets autoupdate
//   returns $state - 0 for off, 1 for on
//
// Gets state of setting for $auto_update_file 
//  If time is past $auto_update_stop (set in params.inc), set state to zero
//
//
// ****************************************************************************
//
// end of bluealliance.inc -- do not leave any lines under the end of this closure
