//
// $Revision: 3.0 $
// $Date: 2016/03/14 22:56:41 $
//
// page.inc
//
// Functions to be used on every page.  Documentation shown above function (and available in compilation).
//
// software release version
//
// set time zone
//
//
// function: debug
//  returns true if $debug is true, otherwise returns false
//
//  Typical use: if (debug()) print "\n<br>DEBUG-set-event: {$query} <br>\n";
//
// comment out TRUE to turn off
//$debug=TRUE;
//
//check $get variable for debug and turn to true (easy for on-the-fly)
//
//
// ****************************************************************************
//
// Database Functions
//
// 
// 
// function: dbshowerror($connection, $die) - show database error
//  $connection = mysql connection context
//  $die = if text flag set to "die", process terminates with this error 
//
//  Displays database error using showerror as the display mechanism.
//
// function: dbsetup()  - database start
//  Returns: $connection MySQL handle
//
//  Sets up single connection for database interaction.  $connection is returned.
//  Also loads sys_event_id, as it is needed everywhere in system
//
//
// function: dblock($dblock, $op) - controls locks on rows: locks, checks for lock or abandons lock
//   $dblock array can be configured two ways:
//      1) An associative array that consists of two values:
//   	    table - table name in which to place lock
//          where - where clause to identify correct row(s)
//      2) An array of associative arrays that consist of the two values above.  In this case
//           the routine performs dblock function for each table/where clause in the array
//    $op - operation: "lock", "check", "abandon"
//      "lock" - lock the row with the current $user
//      "check" - check that the $user still holds a lock 
//      "abandon" - abandon or release the lock
//	"changedby" - update field 'updatedby' in the given table
//
// Implements poor-man's row-locking.  This single function performs all operations, via the $op directive.
//  Function looks for locked column and if locked column exists.
//
//  Can also be used with a "dblockshowedit" function, which will query for a lock and either show a "steal" page
//   or display Save and Cancel buttons.
//
//  Implementation note: there is a "semi-locked" state that occurs when a database throws an error.  
//   The user is instructed to go back, but may not.  In the case the user doesn't go back, 
//    we want new users to edit the page.  In the case where he does go back, we would like the user
//    to edit the page again. This situation is handled with a "semi lock" which is the username
//    preceeded by a '_' character.  Clear adds it, and dblockshowedit ignores the lock if _ preceeds.
//
// Note: Can't seem to find a mysqli describe function to test if the column is there
//
//
//JLV clean	    	  if (! (@mysqli_query ($connection, "update {$wlock["table"]} set locked = NULL where {$wlock["where"]}") ))
//
// function: dblockshowedit($edit, $dblock, $urlroot)
//   $edit - flag is non-zero if editing
//   $dblock array can be configured two ways:
//      1) An associative array that consists of two values:
//   	    table - table name in which to place lock
//          where - where clause to identify correct row(s)
//      2) An array of associative arrays that consist of the two values above.  In this case
//           the routine performs dblock function for each table/where clause in the array
//   $urlroot - urlroot to connect to edit link (or override link)
//
//  Returns: string to display to user
//
// If in edit mode, show edit options.  If not in edit mode, check for lock and 
//   show editability to user
//
//
// function: showupdatedby($dblock)
// 
// if the user is an admin return a string of hwo has updated the table
// 	defined by the dblock paramaters (look above)
// $dblock is an array with keys of "table" and "where" that define what table is being accessed
//
// *******
// Database update and data creation functions
//
// function: db_update($tablename, $table_identifiers, $db_array)
//   $tablename - table name in compsys for which array applies
//   $table_identifiers - formatted array of key/value pairs where the 
//        key is the db column name that is part of the identifier
//        (and thus the where clause), and the value is the data.
//   $db_data_array - tBA data, formatted as an array of key/value 
//        pairs where the key is the db column name and the value
//        is the data.
//
// Updates database with data
//   
// function: db_update_or_create($tablename, $table_identifiers, $db_array)
//   $tablename - table name in compsys for which array applies
//   $table_identifiers - formatted array of key/value pairs where the 
//        key is the db column name that is part of the identifier
//        (and thus the where clause), and the value is the data.
//   $db_data_array - tBA data, formatted as an array of key/value 
//        pairs where the key is the db column name and the value
//        is the data.
//
// Updates database with data
//   Queries for row with data.  If found, updates.  If not found, inserts.
//
//   $dummycol="";
//   foreach($table_identifiers as $column=>$value)
//    if ($dummycol == "") $dummycol = $column;
//
// function: db_update_or_create_if_new($tablename, $table_identifiers, $db_array)
//   $tablename - table name in compsys for which array applies
//   $table_identifies - formatted array of key/value pairs where the 
//        key is the db column name that is part of the identifier
//        (and thus the where clause), and the value is the data.
//   $tba_data_array - tBA data, formatted as an array of key/value 
//        pairs where the key is the db column name and the value
//        is the data.
//
// Updates database with data
//   Queries for row with data.  If found, updates only the columns which are 
//     currently NULL.  If not found, inserts.
//
//
// ****************************************************************************
//
// Page display functions
//
// 
// function: showerror($text)
//  $text - text to show as error message
//
//  Displays error in red to the user.  Instructs user to use BACK button, and provides a link to the home page.
// 
//
// function: pheader
//  $title - title to appear in html title
//  $titleonly = text flag that makes the title only visible in the title bar when set to "titleonly"
//      May be DEPRICATED
//  $options
//    - array of options
//    - openhead - leave head open  
//
//  Intended to be called from every page.  Sets up $user, starts HTML document.
//
//   set up HTML header with title and header properties
//   set H2 title in page as header info
//
// Note: = NUll is used as a default when called with fewer vars
//
// function: pfooter()
//
//   set up HTML footer, close db connection and commit trasactions
//
//
// function: teamhref($teamnum)
//  $teamnum - number of team
//  
// Returns: href text to teaminfo page
//
// convenience function to return team <a href BLAH> on to teaminfo page.  
//  Does not supply the closing </a>.
// 
//
//
// function: tabtextfield($edit, $options, $data, $fieldname, $fieldtag, $size, $maxlenth, $defvalue, $format, $list_of_vals, $editprefix)
//  (function table text field)
//  $edit - edit flag, 1 if editing
//  $options - options to add (see below)
//  $data - dataarray with associative element named fieldname
//  $fieldname - name of field (in associative element, in forms, etc.)
//  $fieldtag - tag to display by field.  if "DisplayField", display field translation is referenced
//  $size - size of editing text box
//  $maxlength - max length of input allowed
//  $defvalue - value to place in text box if in editing mode.  Otherwise this value comes from $data
//  $format - printf-style format for number rendering (usually something for real types such as %.2f
//  $list_of_values - array of possible values, used in list_of_values selector when editing
//  $editprefix - placed on the front of every edit field so that multiple rows can be processed 
//                  if using tabular entry
//   
//
// Displays for reading or for edit in two <td> boxes.  Intended as a generic method to layout boxes
//  within layout tables.
//
// Options in options array:
//  ["tr"] = TRUE - add beginning and ending <tr> tags
//  ["notag="] = TRUE - do not print field label/tag.  Just the field itself
//  ["notd"] = TRUE - do not print <td> open and close
//  ["href"] = TRUE or data_value - enclose data value in href tag.
//               if set to TRUE, encloses the value in an href tag, starting with http://
//               if set to a data value, uses that in a href tag not starting with anything
//  ["th"] = TRUE - use <th></th> tags instead of <td> throughout
//  ["header"] = TRUE - use tag within <th> line without any data.
//   
//
//
// function: tabtextarea ($edit, $options, $data, $fieldname, $fieldtag, $row, $col, $defvalue, $list__of_vals, $editprefix  )
//  $edit - edit flag, 1 if editing
//  $options - options to add (see below)
//  $data - dataarray with associative element named fieldname
//  $fieldname - name of field (in associative element, in forms, etc.
//  $fieldtag - tag to display by field.  if "DisplayField", display field translation is referenced
//  $row - rows of text box when editing
//  $col - cols of text box when editing
//  $defvalue - value to place in text box if in editing mode.  Otherwise this value comes from $data
//
// Similar to tabtextfield, lays out display or edit box
//
// Options in options array:
//  ["tr"] = TRUE - add beginning and ending <tr> tags
//  ["notd"] = TRUE - don't use <td> tags to seperate values
//  ["notag="] = TRUE - do not print field label/tag.  Just the field itself
//  ["href"] = TRUE or data_value - enclose data value in href tag.
//               if set to TRUE, encloses the value in an href tag, starting with http://
//               if set to a data value, uses that in a href tag not starting with anything
//  ["th"] = TRUE - use <th></th> tags instead of <td> throughout
//  ["header"] = TRUE - use tag within <th> line without any data.
//  ["notagabove"] = TRUE - usually tabtextfield puts the description tag above the textbox 
//                    for rendering and editing.  If this option is set true, no setting above
//                    occurs.  No <tr> tags are used to create a "description on one row and 
//                    and edit box on the next.
//   
//
//
// function: texttfield ($fieldtag, $fieldname, $size, $maxlength, $value )
//   $fieldtag - user-displayed tag in front of field
//   $fieldname - name used for variables and db field
//   $size - size of edit text box
//   $maxlength - maximum length of input allowed
//   $value - value placed in field
//
//
// fucntion: hiddenfield ( $fieldname, $value )
//   $fieldname - name used for variables and db field
//   $value - value placed in field
//
//  Used to place a hidden field within a form.
//
//
// alliancefield ($edit, $color, $list_of_values)
//   $edit - edit mode
//   $color - (Red / Blue) designating color of alliance
//   $list_of_values - possible values for field
//
//  paints 3 text boxes for fields
//  
//
//
// ****************************************************************************
//
// fields functions
//
//
//
// function: fields_load: ($post, $fieldnames, $editprefix)
//  loads fields names from post operation
//   $post = text value for get or post.  If set to "post" otherwise assumes get
//   $fieldnames = array of field names assumed to match html form field names
//   $editprefix = prefix appended to each fieldname for searching $_POST.  The 
//                  prefix allows easy processing of tabular data. See tabtextfields for use.
//
// Loads fieldnames from $GET or $POST.  If $post is set to "post", uses a $post variable.
//
//
// function: fields_insert ( $operation, $formfields, $fieldnames )
//  fields_insert: create insert string
//  $operation - name, value, where
//        nameonly or fieldname - name of fields, comma separated
//        insert - values used in SQL insert statement
//        where - where-clause name=value, and separate
//        update - update clause
//  $formfields - array created in fields_load of each field 
//      (an ordered associative array of name=>value for each field)
//  $fieldnames - optional array of field names to be inserted 
//      (an ordered array of db column fieldnames)
//
//   Returns string for insertion into SQL statement.
//
//  Creates strings for insertion into SQL statements based on $operation.
//   Strings include column names (fieldname or nameonly),
//   insert values ('value','value'...), or update/where statements (field='value')
//
//
//
//
// ****************************************************************************
//
// parameters handling functions
//
//    functions that use and manipulate the configurable variables set up 
//     in params.inc
//
//
// 
// function: param_array ($paramgroup)
//  creates array of needed form fields
//   $paramgroup - group name for paramters (Play, Match, etc.)
//   Retuns an array of valid fieldnames
//
//DBCOL     	$fieldnames[] = $paramgroup . "Field_" . $fcnt++;
//
//
// function: tabparamfields($edit, $options, $data, $paramgroup);
//   $edit - edit option
//   $options - identical to tabtextfield options (passed to tabtextfield)
//      Addtional options for this function:
//         pagebreak = if non-zero (set), break page for these number of columns (2 or more)
//         pagebreakstring = string inserted to cause pagebreak.  Works
//           in tandem with pagebreak
//   $data - data row with field params (similar to tabtextfield)
//   $paramgroup - group name for paramters (Play, Match, etc.)
//
//   Displays param fields in a table form, similar to texttabfield.  Displays all param fields
//    in a paramgroup
//
//DBCOL		$ret = $ret . "\n" . tabtextfield ( $edit, $options, $data, $paramgroup . "Field_" . $cnt, 
//
//
// function: param_insert($operation, $formfields, $paramgroup)
//  display/edit custom parameterized fields
//
//  NOTE: operands similar to fields_insert
//  $operation - name, value, where
//        nameonly or fieldname - name of fields, comma separated
//        insert - values used in SQL insert statement
//        where - where-clear name=value, comma separated
//  $formfields - array created in fields_load of each field 
//      (an ordered associative array of name=>value for each field)
//  $paramgroup - group name for paramters (Play, Match, etc.)
//
//   Adds SQL statement fields to SQL statements, similar to fields_insert.
//   Creates strings for insertion into SQL statements.  Strings include column names (fieldname or nameonly),
//   insert values ('value','value'...), or update/where statements (field='value')
//
//DBCOL		$fieldnames[$cnt] = $paramgroup . "Field_" . $cnt;
//
// function: param_load ($post, $paramgroup)
//  loads paramterized fields names from post operation
//   $post = text value for get or post
//   $paramgroup - group name for paramters (Play, Match, etc.)
//
//  Loads parameter fields from $GET or $POST vars.
//
//DBCOL		$fieldnames[$cnt] = $paramgroup . "Field_" . $cnt;
//
// function:param_report ($data, $paramgroup, $public))
//   $data - array or field=>value row arrays (multiple teams)
//   $paramgroup - group name for paramters (Play, Match, etc.)
//   $public - if set to 1 then only print competitive info
//   $teamcnt - count of total teams in paramter report
//
//   Returns a string of table rows
//
// Builds team comparison rows
// 
//
//DBCOL		$fieldname = $paramgroup . "Field_" . $cnt; 
//
// ****************************************************************************
//
// system functions
//
// function get_system_value($name)
//  $name - name of sytem key (value in db)
//
// returns value or NULL if not set
//
// gets system key->value from database system_value table
// function set_system_value($name)
//  $name - name of sytem key (value in db)
//  $value - value to set
//
// returns TRUE if able to set
//
// gets system key->value from database system_value table
//
// user profile / use preferences test and set
//
// function test_user_prop ($property)
//  $property - property name, corresponding to column in user_profile
//
// returns 1, 0 otherwise
//
// function set_user_prop ($property, $value)
//  $property - property name, corresponding to column in user_profile
//  $value - boolean 1/0 value to set
//
// returns TRUE if able to set
//
//
// ****************************************************************************
//
// teams functions
//
//
// function: alliances_load ($post)
//  $post = value or get or post
// assumes team_color_cnt format on variable -- loads into teams arrays
//
// 
// function: teams_validate ( $teams )
//  $teams - array of teams loaded in alliances_load
//
//  Returns: FALSE if a team doesn't exist and shows error for each team.
//
//  Validates each team in array exists in teambot table.
//
//
// teams need evaluation functions
//
//
// Basic use pattern:
// For one-shot team number display:
//  To display teamnum (with or without &bull)
//   team_needs_eval_str($teamnum) where teamnum is displayed
// 
// For lots of teams displayed on page:
//  At top of page, to get array:
//    $needseval = test_user_prop("needeval");
//    if ($needseval == 1) $teams_need_eval = allteams_need_eval(); else $teams_need_eval = array();
//
//  Inline in page where bullet would go:
//    if (in_array($row["teamnum"], $teams_need_eval)) print "&bull;";
// 
// function: team_needs_eval ( $teamnum )
//  $teamnum of team
//
//  Returns: TRUE if $teamnum needs evaluation, FALSE if not
//
//  Evaluation columns are defined in system global $needs_eval_columns
//  Needs eval means at least one of these columns is null
//
// function: team_needs_eval_str ( $teamnum )
//  $teamnum of team
//
//  Returns: string with teamnum if not needing eval and teamnum with a bullet if
//   needing eval
//
//  Evaluation columns are defined in system global $needs_eval_columns
//  Needs eval means at least one of these columns is null
//
// function: allteams_need_eval ()
//
//  Returns: array of teamnums which need evaluation
//
//  Evaluation columns are defined in system global $needs_eval_not_null_cols.
//  Needs eval means at least one of these columns is null
//
//
// ********************
//
// match schedule functions
//
//
//
// match time functions
//
// function: match_get_act_est_time ($type, $matchnum, $actual_utime, $scheduled_utime)
//  $type - match type, P,Q,F
//  $matchnum 
//  $actual_utime
//  $scheduled_utime
//
//  Returns: $match_time_array of key/value pairs, with the following keys:
//    ['heading_tag']
//    ['display_time']
//    ['can_set']
//    ['est_flag']
//    ['estimated_utime']
//
//  Others we may implement:
//    ['seconds_delay']
//
// 
// if $actual_utime 
//  - is not null: converts to HH:MM can displays in display time. heading tag is Act
//  - is null, provides estimated time based on system value match_delay
//
// Uses two system values:
//   - match_time_delay - current delay time from scheduled in match timing
//   - match_time_date - date in YYYY-MM-DD format the last delay was calc'd.  If today is not 
//      same day, resets match_time_delay
//
//
// function: match_set_time ($type, $matchnum)
//  $type - match type, P,Q,F
//  $matchnum 
//
//  Returns: TRUE if set time, FALSE if match time was not set
//
//  Will directly print errors when time could not be set.  Sets actual time of match if within
//    $schedule_match_window and updates system delay variables as needed
//
// function match_get_delay ($scheduled_utime)
//  $scheduled_utime - scheduled utime for comparison
//
//  Returns: seconds of delay to apply to match
//
// Determines if delay time applies to $scheduled_utime and returns delay
//
// Uses two system values:
//   - match_time_delay - current delay time from scheduled in match timing
//   - match_time_date - date in YYYY-MM-DD format the last delay was calc'd.  If today is not 
//      same day, resets match_time_delay
//
//
// function: match_get_recent_actual ($type)
//  $type - match type, P,Q,F
//
//  Returns: $matchnum of most recent actual time that has been set, or FALSE
//
// ****************************************************************************
//
// end of page.inc -- do not leave any lines under the end of this closure
